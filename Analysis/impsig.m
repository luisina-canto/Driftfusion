function [impart,repart,tautrans] = impsig(sol_stepV)

% [impart,repart,tautrans] = impsig(jtrans)
%
% finds the real and imaginary part of the impedance signal generated by
% from a transient time series, jtrans must be a 2 column vector, column 1
% gives the time and column 2 gives the signal, time spacing must be
% linear.  Excitation pulse must be short relative to max time.

% time = jtrans(:,1);
% signal = jtrans(:,2);%-mean(jtrans(:,2));
par = sol_stepV.par;
tstep = par.V_fun_arg(3);

tsol = sol_stepV.t;
t_in = tsol(tsol > tstep)';
t_in = t_in - t_in(1);

Vfun = fun_gen(par.V_fun_type);
Vapp = Vfun(par.V_fun_arg, tsol);
Vappt = Vapp(tsol > tstep);

V0 = par.V_fun_arg(1);
DeltaV = par.V_fun_arg(2) - V0;

J = dfana.calcJ(sol_stepV);
DeltaJ = abs(J.tot(end, 1) - J.tot(1, 1));
Jt = abs(J.tot((tsol > tstep), 1));

tpoints = 1e6;
time = linspace(0, t_in(end), tpoints);
signal = interp1(t_in, Jt, time);

Fs = (length(time)-1)/(time(end)-time(1));     % Sampling frequency
T = time(end)-time(1);            % Sample time
L = length(time);                     % Length of signal
t = (0:L-1)*T;                % Time vector

% perform fast Fourier transform on the time series

NFFT = 2^nextpow2(L); % Next power of 2 from length of y
Y = fft(signal,NFFT)/L;
f = Fs/2*linspace(0,1,NFFT/2);

% divide into real and imaginary components
impart = [f imag(Y(1:NFFT/2))];
repart = [f real(Y(1:NFFT/2))];

% find time constant corresponding to the extema of the biggest loop in the
% spectrum - relevant for single time constant processes
[y,ind] = min(imag(Y));
tautrans = 1/(2*pi*f(ind)); 
omega = 2*pi*f;
% Plot real and imaginary parts of the impedance spectrum

figure(1)
loglog(f, abs(imag(Y(1:NFFT/2))))./(omega))
hold on
loglog(f, abs(real(Y(1:NFFT/2))),'r')
title('Impedance spectrum')
xlabel('Frequency (Hz)')
ylabel('Im, Re parts of spectrum')
hold off

% Nyquist plot

figure(2)
plot(real(Y(1:NFFT/2)), -imag(Y(1:NFFT/2)))
title('Nyquist plot')
xlabel('Real')
ylabel('Imaginary')

